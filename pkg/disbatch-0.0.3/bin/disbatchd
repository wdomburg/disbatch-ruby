#!/usr/bin/env ruby

require 'rubygems'

require 'disbatch'
require 'eventmachine'
require 'json'
require 'trollop'

opts = Trollop.options do
	opt 'config', 'the disbatchd config file', :default => '/etc/disbatch/disbatchd.conf'
	opt 'max', 'maximum number of threads per queue', :default => 10
	opt 'plugins', 'path(s) to dispatch plugins', :multi => true
	opt 'force',  'force node registration'
end

config_file = opts['config']
config = File.exists?(config_file) ? JSON.parse(File.read(config_file)) : {}
config = opts.merge(config)
force = config['force'] || false

node = Disbatch.node.register(force)
max  = config['max']

config.has_key?('plugins') && config['plugins'].each { |dir| Disbatch::Plugin.init_all(dir) }
Disbatch::Plugin.init_all(File.dirname(File.expand_path(__FILE__)) + '/../lib/disbatch/plugin/**/*.rb')

trap('TERM') { node.release; exit }
trap('INT')  { node.release; exit }
trap('QUIT') { node.release; exit }

EventMachine::run do

	queues = Disbatch::Queue.get_all

	queues.each do |queue|

		next unless Disbatch::Plugin[queue.plugin]

		puts "Adding #{queue.plugin} runner for #{queue.id}"

		tg = ThreadGroup.new

		EventMachine::add_periodic_timer(0.1) do

			next unless ((nt = tg.list.length) < max && (np = queue.length) > 0)

			ft = max - nt

			(np > ft ? ft : np).times do
				t = Thread.new do
					task = queue.pop

					unless defined?(task) && !task.nil? && task.params 
						puts 'Huh?  Got invalid task back.'
						next
					end

					begin
						task.execute!
					rescue
						puts 'Damn.  Execution failed.'
						task.release
					end
				end

				tg.add(t)
			end

		end

	end

end

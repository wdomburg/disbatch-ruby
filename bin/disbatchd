#!/usr/bin/env ruby

require 'rubygems'

require 'disbatch'
require 'eventmachine'
require 'json'
require 'trollop'

opts = Trollop.options do
	opt 'config', 'the disbatchd config file', :default => '/etc/disbatch/disbatchd.conf'
	opt 'max', 'maximum number of threads per queue', :default => 10
	opt 'plugins', 'path(s) to dispatch plugins', :multi => true, :type => :string
    opt 'mongo_host', 'mongo host'
    opt 'mongo_port', 'mongo port'
    opt 'mongo_db', 'mongo db'
	opt 'force',  'force node registration'
end

config_file = opts['config']
config = File.exists?(config_file) ? JSON.parse(File.read(config_file)) : {}
config = opts.merge(config)
force = config['force'] || false

node = Disbatch.node.register(force)
max  = config.has_key?('max') ? config['max'] : 10

Disbatch::Plugin.init_all(File.dirname(File.expand_path(__FILE__)) + '/../lib/disbatch/plugin/**/*.rb')
config.has_key?('plugins') && config['plugins'].each { |dir| Disbatch::Plugin.init_all(dir) }

config.has_key?('mongo_host') && Disbatch.mongo_host = config['mongo_host']
config.has_key?('mongo_port') && Disbatch.mongo_port = config['mongo_port']
config.has_key?('mongo_db') && Disbatch.mongo_db = config['mongo_db']

trap('TERM') { node.release; exit }
trap('INT')  { node.release; exit }
trap('QUIT') { node.release; exit }

@runners = {}

def update_queues

		Disbatch::Queue.get_all.each do |queue|

			# runner already exists
			next if @runners.has_key?(queue.id)

			# node configured to ignore
			next if queue.nodes_ignore.include?(Disbatch.node_id)

			# node pinned but not on this node
			next if !queue.nodes_pin.empty? && !queue.nodes_pin.include?(Disbatch.node_id)

			# no plugin for queue
			next unless Disbatch::Plugin[queue.plugin]

			puts "Adding #{queue.plugin} runner for #{queue.id}"

			@runners[queue.id] = { 'tg' => ThreadGroup.new, 'queue' => queue }

		end

end

update_queues

EventMachine::run do

	EventMachine::add_periodic_timer(5) do

		update_queues

		@runners.each do |id, runner|
			puts "#{id}: #{runner['queue'].plugin}: #{runner['tg'].list.length}"
		end

	end

	EventMachine::add_periodic_timer(0.5) do

		@runners.each do |id, runner|

			tg = runner['tg']
			queue = runner['queue']

			next unless ((nt = tg.list.length) < max && (np = queue.length) > 0)

			ft = max - nt

			(np > ft ? ft : np).times do
				t = Thread.new do
					task = queue.pop

					unless defined?(task) && !task.nil? && task.params 
						puts 'Huh?  Got invalid task back.'
						next
					end

					begin
						task.execute!
					rescue
						puts 'Damn.  Execution failed.'
						task.release
					end
				end

				tg.add(t)
			end

		end

	end

end
